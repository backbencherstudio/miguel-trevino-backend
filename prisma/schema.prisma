// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  firstName String?
  lastName  String?
  fullName  String?
  email     String  @unique
  password  String?
  avatar    String?

  //only for ueser
  companyName String?
  jobTitle    String?

  //profile
  phone      String?
  timezone   String?
  dateFormat String?

  //sequrity
  sessionTimeout            Int?
  passwordExpiry            Int?
  two_factor_authentication Int     @default(0)
  secret                    String?

  //parmitions
  emailAccess Boolean @default(true)
  phoneAccess Boolean @default(false)
  pushAccess  Boolean @default(false)

  type userStatus @default(user)

  //relations
  nominations  nomination[]
  schedule     schedule[]
  chatThread   chatRoom?
  chatMessages messages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum userStatus {
  user
  admin
}

model nomination {
  id            String         @id @default(cuid())
  nominationId  String         @unique
  commodityType CommodityTypes
  Origin        String
  volume        Volumes
  destination   String
  unit          Units
  transportMode TransportModes

  // Scheduling & Additional Information
  BeginningDate DateTime
  EndDate       DateTime
  Notes         String?

  //relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  //status
  status NominationStatus @default(Submitted)

  //after apprived
  scheduleFile String?

  requestedDate DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("nominations")
}

enum CommodityTypes {
  NGLs
  Refined_Products
  Natural_Gas
  Petrochemicals
  Crude_Oil
}

enum Volumes {
  low
  medium
  high
}

enum Units {
  bbls
  gallons
  MCF
  tons
}

enum TransportModes {
  Pipeline
  Trucking
  Railcar
  Marine
}

enum NominationStatus {
  Submitted
  Confirmed
}

model schedule {
  id            String         @id @default(cuid())
  assignTo      String
  user          User           @relation(fields: [assignTo], references: [id], onDelete: Cascade)
  commodityType CommodityTypes
  transportMode TransportModes
  scheduleFile  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model chatRoom {
  id       String     @id @default(cuid())
  userId   String     @unique
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages messages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model messages {
  id         String   @id @default(cuid())
  chatRoomId String
  chatRoom     chatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  content String

  // helpful metadata
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
